
    
    
    
    
    
    
    
    
    
    [{"authors":null,"categories":null,"content":"This is Evan. My tech adventure began after earning dual bachelor’s degrees in Computer Science and Japanese at DLUT. Yes, I can code and say “Hello, World!” in Japanese!\nI joined Meituan as an iOS developer after finishing my undergraduate studies. During the 2022 Shanghai lockdown, our app, Meituan Grocery, became a lifeline for thousands trapped at home. This experience cemented my belief in the power of technology to change lives, one app at a time. Eager to level up my tech skills and broaden my horizons, I bid farewell to Meituan and set sail for the US to pursue my graduate studies.\nI’m currently seeking 2025 new grad opportunities. Feel free to reach out to me for any exciting opportunities. Let’s improve the digital world a better place, one line of code at a time!\n","date":1554595200,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1554595200,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"","publishdate":"0001-01-01T00:00:00Z","relpermalink":"","section":"authors","summary":"This is Evan. My tech adventure began after earning dual bachelor’s degrees in Computer Science and Japanese at DLUT. Yes, I can code and say “Hello, World!” in Japanese!\nI joined Meituan as an iOS developer after finishing my undergraduate studies.","tags":null,"title":"黄燕飞","type":"authors"},{"authors":[],"categories":null,"content":" Click on the Slides button above to view the built-in slides feature. Slides can be added in a few ways:\nCreate slides using Hugo Blox Builder’s Slides feature and link using slides parameter in the front matter of the talk file Upload an existing slide deck to static/ and link using url_slides parameter in the front matter of the talk file Embed your slides (e.g. Google Slides) or presentation video on this page using shortcodes. Further event details, including page elements such as image galleries, can be added to the body of this page.\n","date":1906549200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1906549200,"objectID":"a8edef490afe42206247b6ac05657af0","permalink":"http://localhost:1313/talk/example-talk/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/talk/example-talk/","section":"event","summary":"An example talk using Hugo Blox Builder's Markdown slides feature.","tags":[],"title":"Example Talk","type":"event"},{"authors":null,"categories":null,"content":"Project2 Extendible Hash 算法简述 两个重要概念\ndirectory：目录页，根据取最低的global depth位bits，得到key对应的bucket bucket：存hashed key 三个重要变量：\nglobal depth：规定看最低多少位bits，global depth为n，有2^n个directories local depth：bucket的depth，规定bucket只看最低local depth位的bits来分配hashed key放到哪个bucket中，local depth不能大于global depth bucket size：规定了一个bucket里最多放多少个hashed key insert一个key 讨论最常见的三种情况。\nbucket没有满 这种情况下直接插入就行\nbucket满了，但是bucket的local depth还是小于global depth 此时需要split bucket，并将local depth+1，更新directory指向local depth的指针，同时根据新的local depth重新分配被分裂桶中的元素以及新加的元素\nbucket满了，并且bucket的local depth等于global depth 因为local depth不能大于global depth，因此这种情况下，需要global depth先加1，global depth加1之后，directories要✖️2，就是复制一份原来的directories，bucket的local depth也要加1，然后split bucket，directory指向分裂的buckets的指针要重新分配，分裂的buckets里的hashed key也要重新分配。\n项目代码简述 ExtendibleHTableDirectoryPage 成员变量 uint32_t max_depth_; uint32_t global_depth_; uint8_t local_depths_[HTABLE_DIRECTORY_ARRAY_SIZE]; //local depth数组 page_id_t bucket_page_ids_[HTABLE_DIRECTORY_ARRAY_SIZE];//指向对应的bucket 函数 这里的bucket_idx是根据key以及global depth hash得来的，指向具体的bucket\nauto ExtendibleHTableDirectoryPage::GetSplitImageIndex(uint32_t bucket_idx) const -\u0026gt; uint32_t { //GetSplitImageIndex要在local depth + 1之后。 uint32_t local_depth = local_depths_[bucket_idx]; return bucket_idx^(1U \u0026lt;\u0026lt; (local_depth - 1)); } ExtendibleHTableBucketPage 这里的bucket_idx是指向当前桶里的某个元素的idx，桶里元素是key，value的pair\nExtendibleHTableHeaderPage 创建一个headerPage，不能用构造函数。要从bpm中拿到新的一个page\npage_id_t header_page_id = INVALID_PAGE_ID; BasicPageGuard header_guard = bpm_-\u0026gt;NewPageGuarded(\u0026amp;header_page_id); header_page_ = header_guard.AsMut\u0026lt;ExtendibleHTableHeaderPage\u0026gt;(); header_page_-\u0026gt;Init(header_max_depth_); PageGuard auto BasicPageGuard::UpgradeWrite() -\u0026gt; WritePageGuard auto BasicPageGuard::UpgradeRead() -\u0026gt; ReadPageGuard page先加对应的锁，然后再生成Read/WritePageGuard,原先的bpm_和page_置空\nBug记录 BufferPoolManager的pool size很小的时候，如果fetch完页面，用完之后不及时释放锁，可能会导致pool里所有页面都是锁着的，而此时如果再fetch新页面，会有问题。因此用完页面以后要及时释放 GetValue的时候，可能访问的directory_page或者bucket_page都不存在，那这种情况下返回的page_id会是IN_VALID_PAGE_ID,需要直接返回false ","date":1709251200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1709251200,"objectID":"086fe3e24c02067616ee39b3031a7594","permalink":"http://localhost:1313/post/cmu15445-p2/","publishdate":"2024-03-01T00:00:00Z","relpermalink":"/post/cmu15445-p2/","section":"post","summary":"CMU15445's Project2 implements an Extendible Hash for dynamic data indexing. It manages keys with global and local depths and handles variable scenarios during insertion. Identified bugs pertain to BufferPoolManager capacity and invalid page handling.","tags":null,"title":"Extendible Hash","type":"post"},{"authors":null,"categories":null,"content":"Project1 BufferPoolManager LRU-K LRU-K算法是干什么的？它是一个页面置换算法，系统将虚拟内存地址划分为各个虚拟页(page_id),将物理内存地址划分为物理页(frame_id)，当物理内存满了以后，就得决定该淘汰哪个虚拟页，从而能够加载新的虚拟页。\n成员变量 LRUKReplacer成员变量\nstd::unordered_map\u0026lt;frame_id_t, LRUKNode\u0026gt; node_store_; frame_id具体存的LRUKNode\nsize_t current_timestamp_{0}; 当前的时间戳，用每加入一个新页面自增来模拟\nsize_t curr_size_{0}; 当前可淘汰的(evictable)页面数量\nsize_t replacer_size_; max size of frame\nsize_t k_;\nstd::mutex latch_;\nLRUKNode成员变量\nframe_id_t fid_;\nstd::list\u0026lt;size_t\u0026gt; history_;\nsize_t k_;\nbool is_evictable_{false}; 标记页面是否可以被淘汰\n函数 LRUKNode函数\nauto GetKDistance(size_t cur) -\u0026gt; uint64_t 计算时间差，如果该页面的历史次数小于k次，则为正无穷，如果大于等于k次，则计算当前时间戳与第k次的时间差，并返回。\nLRUKReplacer函数\nauto Evict(frame_id_t *frame_id) -\u0026gt; bool; 淘汰可淘汰的页面中(is_evictabe = true)，时间距离最远的page\nvoid RecordAccess(frame_id_t frame_id, AccessType access_type = AccessType::*Unknown*); 记录访问了哪个frame页面。考虑节点是否已经存在，如果不存在且replacer的size已经满的情况下访问失败，否则如果存在history_list加入当前时间戳，然后current_timestamp自增；如果不存在先建立新的LRUKNode节点，再做后续的步骤\nvoid LRUKReplacer::SetEvictable(frame_id_t frame_id, bool set_evictable) 该函数会影响curr_size的大小，因为curr_size返回的是当前可淘汰页面的数量，如果通过该函数把以前false的设置为true了，那curr_size要自增，反之则自减\nvoid LRUKReplacer::Remove(frame_id_t frame_id) 驱逐某个页面。首先要保证该页面是否存在，如果存在还要保证该页面是否可以被驱逐，在前两个条件都满足的情况下，可以驱逐这个页面，curr_size要减1。\nBufferPoolManager 成员变量 BufferPoolManager成员变量\nconst size_t pool_size_; bufferpool的size，代表了可以有多少页面在bufferpool里\nstd::atomic\u0026lt;page_id_t\u0026gt; next_page_id_ = 0; 下一个page_id，从0开始保持自增\nPage *pages_; 一个数组，存放的是bufferpool中的页面，根据frame_id得到当前frame保存的page\nstd::unique_ptr\u0026lt;DiskScheduler\u0026gt; disk_scheduler_ __attribute__((__unused__)); 负责向磁盘读写页面内容\nstd::unordered_map\u0026lt;page_id_t, frame_id_t\u0026gt; page_table_; 记录虚拟页面对应的物理内存页面\nstd::unique_ptr\u0026lt;LRUKReplacer\u0026gt; replacer_;\nstd::list\u0026lt;frame_id_t\u0026gt; free_list_; 空闲的物理页面，如果有就不需要考虑替换哪个页面了\nstd::mutex latch_; latch 是一种轻量级的同步机制，用于保护短期操作，而 lock 是一种用于控制长期访问共享资源的同步机制，通常用于实现事务的隔离和一致性。\nDiskScheduler\nDiskManager *disk_manager_ __attribute__((__unused__));\nChannel\u0026lt;std::optional\u0026lt;DiskRequest\u0026gt;\u0026gt; request_queue_; 处理请求队列\nstd::optional\u0026lt;std::thread\u0026gt; background_thread_; 在后台线程处理请求\nstruct DiskRequest { /** Flag indicating whether the request is a write or a read. */ bool is_write_; /** * Pointer to the start of the memory location where a page is either: * 1. being read into from disk (on a read). * 2. being written out to disk (on a write). */ char *data_; /** ID of the page being read from / written to disk. */ page_id_t page_id_; /** Callback used to signal to the request issuer when the request has been completed. */ std::promise\u0026lt;bool\u0026gt; callback_; }; 函数 BufferPoolManager\n构造函数 构造函数需要做三件事，首先初始化replacer，第二根据pool_size初始化pages数组，最后把所有页面都放入free_list中。\nauto NewPage(page_id_t *page_id) -\u0026gt; Page *; 新生成一个虚拟页面，虚拟页面得有对应的物理页面。所以需要判断free_list有无可用的物理页面，如果有就直接取空闲页面，如果没有得调用replacer根据LRUK驱逐一个页面。如果驱逐出去的页面是dirty的，那我们得把这个页面写回给磁盘。然后要将新页面的pin_count设置为1，调用\nreplacer_-\u0026gt;RecordAccess(frame_id);和replacer_-\u0026gt;SetEvictable(frame_id, false);两个函数，因为生成了新页面以后肯定是要用的，所以要调用这两个函数。\nauto NewPageGuarded(page_id_t *page_id) -\u0026gt; BasicPageGuard; 该函数在project2中完成，用于管理pin_count，不需要手动unpin\nauto FetchPage(page_id_t page_id, AccessType access_type = AccessType::*Unknown*) -\u0026gt; Page *; 如果缓冲池中有该page，可以直接取到page，pin_count加1，调用\nreplacer_-\u0026gt;RecordAccess(frame_id);replacer_-\u0026gt;SetEvictable(frame_id, false);然后返回该page。\n如果不存在，先确定page加载到哪个frame页面，然后从磁盘读取该page数据，加载到frame中。这一步其实与NewPage逻辑有点相似，只不过NewPage只要返回空的page就可以，但是fetchPage得返回从磁盘中读取的page\nauto UnpinPage(page_id_t page_id, bool is_dirty, AccessType access_type = AccessType::*Unknown*) -\u0026gt; bool; 通过is_dirty参数告诉bpm该页面是否被修改过，然后需要对引用次数减1。如果引用次数为0，那么调用replacer_-\u0026gt;SetEvictable(frame_id, true);说明该页面已经被用完了，可以被驱逐了。\nauto FlushPage(page_id_t page_id) -\u0026gt; bool; 通过DiskScheduler将脏页面写回磁盘\nauto promise = disk_scheduler_-\u0026gt;CreatePromise(); auto future = promise.get_future(); disk_scheduler_-\u0026gt;Schedule({true, page-\u0026gt;GetData(), page-\u0026gt;GetPageId(), std::move(promise)}); future.get(); ","date":1707091200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1707091200,"objectID":"1d169f7641b670cd965f1419adeb29da","permalink":"http://localhost:1313/post/cmu15445-p1/","publishdate":"2024-02-05T00:00:00Z","relpermalink":"/post/cmu15445-p1/","section":"post","summary":"In the CMU15445 project, the BufferPoolManager utilizes the LRU-K algorithm for memory management, handling virtual and physical page allocations within a buffer pool. Key functions include page creation, eviction based on access history, and writing 'dirty' pages back to disk, thereby optimizing database performance and memory use.","tags":null,"title":"BufferPoolManager","type":"post"},{"authors":["黄燕飞"],"categories":null,"content":" Create your slides in Markdown - click the Slides button to check out the example. Add the publication’s full text or supplementary notes here. You can use rich formatting such as including code, math, and images.\n","date":1554595200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1554595200,"objectID":"557dc08fd4b672a0c08e0a8cf0c9ff7d","permalink":"http://localhost:1313/publication/preprint/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/publication/preprint/","section":"publication","summary":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum.","tags":["Source Themes"],"title":"An example preprint / working paper","type":"publication"},{"authors":[],"categories":[],"content":"Create slides in Markdown with Hugo Blox Builder Hugo Blox Builder | Documentation\nFeatures Efficiently write slides in Markdown 3-in-1: Create, Present, and Publish your slides Supports speaker notes Mobile friendly slides Controls Next: Right Arrow or Space Previous: Left Arrow Start: Home Finish: End Overview: Esc Speaker notes: S Fullscreen: F Zoom: Alt + Click PDF Export Code Highlighting Inline code: variable\nCode block:\nporridge = \u0026#34;blueberry\u0026#34; if porridge == \u0026#34;blueberry\u0026#34;: print(\u0026#34;Eating...\u0026#34;) Math In-line math: $x + y = z$\nBlock math:\n$$ f\\left( x \\right) = ;\\frac{{2\\left( {x + 4} \\right)\\left( {x - 4} \\right)}}{{\\left( {x + 4} \\right)\\left( {x + 1} \\right)}} $$\nFragments Make content appear incrementally\n{{% fragment %}} One {{% /fragment %}} {{% fragment %}} **Two** {{% /fragment %}} {{% fragment %}} Three {{% /fragment %}} Press Space to play!\nOne Two Three A fragment can accept two optional parameters:\nclass: use a custom style (requires definition in custom CSS) weight: sets the order in which a fragment appears Speaker Notes Add speaker notes to your presentation\n{{% speaker_note %}} - Only the speaker can read these notes - Press `S` key to view {{% /speaker_note %}} Press the S key to view the speaker notes!\nOnly the speaker can read these notes Press S key to view Themes black: Black background, white text, blue links (default) white: White background, black text, blue links league: Gray background, white text, blue links beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links Custom Slide Customize the slide style and background\n{{\u0026lt; slide background-image=\u0026#34;/media/boards.jpg\u0026#34; \u0026gt;}} {{\u0026lt; slide background-color=\u0026#34;#0000FF\u0026#34; \u0026gt;}} {{\u0026lt; slide class=\u0026#34;my-style\u0026#34; \u0026gt;}} Custom CSS Example Let’s make headers navy colored.\nCreate assets/css/reveal_custom.css with:\n.reveal section h1, .reveal section h2, .reveal section h3 { color: navy; } Questions? Ask\nDocumentation\n","date":1549324800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1549324800,"objectID":"0e6de1a61aa83269ff13324f3167c1a9","permalink":"http://localhost:1313/slides/example/","publishdate":"2019-02-05T00:00:00Z","relpermalink":"/slides/example/","section":"slides","summary":"An introduction to using Hugo Blox Builder's Slides feature.","tags":[],"title":"Slides","type":"slides"},{"authors":null,"categories":null,"content":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.\nNullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.\nCras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.\nSuspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.\nAliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.\n","date":1461715200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1461715200,"objectID":"e8f8d235e8e7f2efd912bfe865363fc3","permalink":"http://localhost:1313/project/example/","publishdate":"2016-04-27T00:00:00Z","relpermalink":"/project/example/","section":"project","summary":"An example of using the in-built project page.","tags":["Deep Learning"],"title":"Example Project","type":"project"},{"authors":null,"categories":null,"content":"","date":1461715200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1461715200,"objectID":"d1311ddf745551c9e117aa4bb7e28516","permalink":"http://localhost:1313/project/external-project/","publishdate":"2016-04-27T00:00:00Z","relpermalink":"/project/external-project/","section":"project","summary":"An example of linking directly to an external project website using `external_link`.","tags":["Demo"],"title":"External Project","type":"project"},{"authors":["黄燕飞","Robert Ford"],"categories":null,"content":" Click the Cite button above to demo the feature to enable visitors to import publication metadata into their reference management software. Create your slides in Markdown - click the Slides button to check out the example. Add the publication’s full text or supplementary notes here. You can use rich formatting such as including code, math, and images.\n","date":1441065600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1441065600,"objectID":"966884cc0d8ac9e31fab966c4534e973","permalink":"http://localhost:1313/publication/journal-article/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/publication/journal-article/","section":"publication","summary":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum.","tags":["Source Themes"],"title":"An example journal article","type":"publication"},{"authors":["黄燕飞","Robert Ford"],"categories":null,"content":" Click the Cite button above to demo the feature to enable visitors to import publication metadata into their reference management software. Create your slides in Markdown - click the Slides button to check out the example. Add the publication’s full text or supplementary notes here. You can use rich formatting such as including code, math, and images.\n","date":1372636800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1372636800,"objectID":"69425fb10d4db090cfbd46854715582c","permalink":"http://localhost:1313/publication/conference-paper/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/publication/conference-paper/","section":"publication","summary":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum.","tags":[],"title":"An example conference paper","type":"publication"}]